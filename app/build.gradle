apply plugin: 'com.android.application'

def getLastTag() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe'
        standardOutput = stdout
    }
    def res = stdout.toString()
    return res
}

static def generateVersionCode(String tag) {
    def versions = tag.tokenize('.')

    def major = versions[0].toInteger()
    def minor = versions[1].toInteger()
    def patch = versions[2].toInteger()
    def res = (major * 1000 + minor.toInteger()) * 100 + patch.toInteger()
    return res
}

def tag = getLastTag()

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.example.tabatatimer"
        minSdkVersion 23
        targetSdkVersion 30
        targetSdkVersion 30
        versionCode generateVersionCode(tag)
        versionName tag.replace("\n", "")
        println versionCode

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

def getGitCommand = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log','--date=local','--name-status','--after="2018.07.19"'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task prinGitLog{
    println getGitCommand()
}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}